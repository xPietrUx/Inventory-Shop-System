# Generated by Django 5.2.3 on 2025-06-17 14:32

from django.db import migrations
from django.conf import settings
from django.contrib.auth.hashers import make_password
from datetime import date, timedelta
import django.db.models  # Upewnij się, że ten import jest obecny, jeśli używasz Q


def seed_data(apps, schema_editor):
    print("--- Rozpoczynam seed_data ---")
    User = apps.get_model("users", "Users")
    Software = apps.get_model("licenses", "Software")
    License = apps.get_model("licenses", "License")

    # --- Create Users ---
    users_data = [
        {
            "username": "jdoe_seed",
            "email": "jdoe_seed@example.com",
            "name": "John",
            "surname": "Doe",
            "position": "Developer",
        },
        {
            "username": "asmith_seed",
            "email": "asmith_seed@example.com",
            "name": "Alice",
            "surname": "Smith",
            "position": "Designer",
        },
        {
            "username": "bwayne_seed",
            "email": "bwayne_seed@example.com",
            "name": "Bruce",
            "surname": "Wayne",
            "position": "Project Manager",
        },
    ]
    created_users = []
    print("Tworzenie użytkowników...")
    for user_data in users_data:
        user, created = User.objects.get_or_create(
            username=user_data["username"],
            defaults={
                "email": user_data["email"],
                "password": make_password("Password123!"),  # Use a secure password
                "name": user_data["name"],
                "surname": user_data["surname"],
                "position": user_data["position"],
                "is_staff": False,
                "is_superuser": False,
            },
        )
        if created:
            print(f"  Utworzono użytkownika: {user.username}")
        else:
            print(f"  Użytkownik już istnieje: {user.username}")
        created_users.append(user)

    if (
        not created_users and users_data
    ):  # Fallback if users already existed and created_users is empty
        print("  Próba pobrania istniejących użytkowników (fallback)...")
        try:
            created_users = [
                User.objects.get(username=ud["username"]) for ud in users_data
            ]
        except User.DoesNotExist as e:
            print(f"  Błąd podczas pobierania użytkownika (fallback): {e}")
            print(
                "!!! BŁĄD KRYTYCZNY: Nie można pobrać użytkowników. Przerywam seed_data."
            )
            print("--- Zakończono seed_data (z błędami krytycznymi) ---")
            return

    print(
        f"Zakończono tworzenie/pobieranie użytkowników. Liczba użytkowników do użycia: {len(created_users)}"
    )

    # --- Create Software ---
    software_data = [
        {"name": "PhotoEditor Pro X", "producer": "PixelPerfect Inc."},
        {"name": "DevSuite Ultimate 2024", "producer": "CodeGenius Ltd."},
        {"name": "OfficeFlow 360 Premium", "producer": "Productivity Solutions"},
        {"name": "SecureNet VPN Plus", "producer": "CyberGuard Systems"},
        {"name": "MusicMaker Studio Pro", "producer": "AudioWave Tech"},
        {"name": "DataCruncher Enterprise", "producer": "InfoAnalytics Co."},
    ]
    created_software = []
    print("Tworzenie oprogramowania...")
    for sw_data in software_data:
        software_item, created = Software.objects.get_or_create(
            name=sw_data["name"], defaults={"producer": sw_data["producer"]}
        )
        if created:
            print(f"  Utworzono oprogramowanie: {software_item.name}")
        else:
            print(f"  Oprogramowanie już istnieje: {software_item.name}")
        created_software.append(software_item)
    print(
        f"Zakończono tworzenie oprogramowania. Liczba pozycji: {len(created_software)}"
    )

    # --- Create Licenses ---
    if not created_users or not created_software:
        print(
            "!!! BŁĄD: Nie można utworzyć licencji - brak załadowanych użytkowników lub oprogramowania."
        )
        if not created_users:
            print("  Lista 'created_users' jest pusta.")
        if not created_software:
            print("  Lista 'created_software' jest pusta.")
        print("--- Zakończono seed_data (z problemami) ---")
        return

    # Sprawdzenie czy indeksy nie wyjdą poza zakres
    if len(created_software) < 6 or len(created_users) < 3:
        print(
            "!!! BŁĄD: Niewystarczająca liczba utworzonych programów lub użytkowników do utworzenia wszystkich licencji."
        )
        print(f"  Liczba programów: {len(created_software)}, potrzebne co najmniej 6")
        print(f"  Liczba użytkowników: {len(created_users)}, potrzebne co najmniej 3")
        print("--- Zakończono seed_data (z problemami) ---")
        return

    licenses_to_create = [
        # Licenses for PhotoEditor Pro X
        {
            "sw": created_software[0],
            "user": created_users[0],
            "key": "PEPX-0001-AAAA-BBBB",
            "purchase": date(2023, 1, 10),
            "exp": date(2025, 1, 9),
            "type": "Subscription",
        },
        {
            "sw": created_software[0],
            "user": created_users[1],
            "key": "PEPX-0002-CCCC-DDDD",
            "purchase": date(2023, 3, 15),
            "exp": None,
            "type": "Perpetual",
        },
        # Licenses for DevSuite Ultimate 2024
        {
            "sw": created_software[1],
            "user": created_users[0],
            "key": "DSUL-0001-EEEE-FFFF",
            "purchase": date(2023, 2, 20),
            "exp": date(2024, 2, 19),
            "type": "Annual",
        },
        {
            "sw": created_software[1],
            "user": created_users[2],
            "key": "DSUL-0002-GGGG-HHHH",
            "purchase": date(2023, 5, 5),
            "exp": date(2025, 5, 4),
            "type": "Subscription",
        },
        # Licenses for OfficeFlow 360 Premium
        {
            "sw": created_software[2],
            "user": created_users[1],
            "key": "OF360-0001-IIII-JJJJ",
            "purchase": date(2022, 12, 1),
            "exp": date(2024, 11, 30),
            "type": "Subscription",
        },
        {
            "sw": created_software[2],
            "user": created_users[2],
            "key": "OF360-0002-KKKK-LLLL",
            "purchase": date(2023, 6, 10),
            "exp": None,
            "type": "Perpetual",
        },
        # Licenses for SecureNet VPN Plus
        {
            "sw": created_software[3],
            "user": created_users[0],
            "key": "SNVP-0001-MMMM-NNNN",
            "purchase": date(2023, 7, 1),
            "exp": date(2024, 6, 30),
            "type": "Annual",
        },
        {
            "sw": created_software[3],
            "user": created_users[1],
            "key": "SNVP-0002-OOOO-PPPP",
            "purchase": date(2023, 8, 5),
            "exp": date(2024, 8, 4),
            "type": "Annual",
        },
        # Licenses for MusicMaker Studio Pro
        {
            "sw": created_software[4],
            "user": created_users[2],
            "key": "MMSP-0001-QQQQ-RRRR",
            "purchase": date(2023, 9, 12),
            "exp": None,
            "type": "Perpetual",
        },
        # Licenses for DataCruncher Enterprise
        {
            "sw": created_software[5],
            "user": created_users[0],
            "key": "DCEN-0001-SSSS-TTTT",
            "purchase": date(2023, 4, 1),
            "exp": date(2025, 3, 31),
            "type": "Subscription",
        },
        {
            "sw": created_software[5],
            "user": created_users[1],
            "key": "DCEN-0002-UUUU-VVVV",
            "purchase": date(2023, 10, 20),
            "exp": date(2024, 10, 19),
            "type": "Annual",
        },
        {
            "sw": created_software[5],
            "user": created_users[2],
            "key": "DCEN-0003-WWWW-XXXX",
            "purchase": date(2024, 1, 5),
            "exp": None,
            "type": "Perpetual",
        },
    ]
    print("Tworzenie licencji...")
    for lic_data in licenses_to_create:
        license_item, created = License.objects.get_or_create(
            license_key=lic_data["key"],
            defaults={
                "software_id": lic_data["sw"],
                "user_id": lic_data["user"],
                "purchase_date": lic_data["purchase"],
                "expiration_date": lic_data["exp"],
                "license_type": lic_data["type"],
            },
        )
        if created:
            print(f"  Utworzono licencję: {license_item.license_key}")
        else:
            print(f"  Licencja już istnieje: {license_item.license_key}")
    print("Zakończono tworzenie licencji.")
    print("--- Zakończono seed_data pomyślnie ---")


def remove_data(apps, schema_editor):
    print("--- Rozpoczynam remove_data ---")
    User = apps.get_model("users", "Users")
    Software = apps.get_model("licenses", "Software")
    License = apps.get_model("licenses", "License")

    software_names_to_delete = [
        "PhotoEditor Pro X",
        "DevSuite Ultimate 2024",
        "OfficeFlow 360 Premium",
        "SecureNet VPN Plus",
        "MusicMaker Studio Pro",
        "DataCruncher Enterprise",
    ]
    user_names_to_delete = ["jdoe_seed", "asmith_seed", "bwayne_seed"]

    licenses_deleted_count, _ = License.objects.filter(
        django.db.models.Q(software_id__name__in=software_names_to_delete)
        | django.db.models.Q(user_id__username__in=user_names_to_delete)
    ).delete()
    print(f"  Usunięto licencji: {licenses_deleted_count}")

    software_deleted_count, _ = Software.objects.filter(
        name__in=software_names_to_delete
    ).delete()
    print(f"  Usunięto oprogramowania: {software_deleted_count}")

    users_deleted_count, _ = User.objects.filter(
        username__in=user_names_to_delete
    ).delete()
    print(f"  Usunięto użytkowników: {users_deleted_count}")
    print("--- Zakończono remove_data ---")


class Migration(migrations.Migration):

    dependencies = [
        (
            "licenses",
            "0002_initial",
        ),
        (
            "users",
            "0001_initial",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(seed_data, remove_data),
    ]
