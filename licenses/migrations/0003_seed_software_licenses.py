# Generated by Django 5.2.3 on 2025-06-17 14:32

from django.db import migrations
from django.contrib.auth.hashers import make_password
from datetime import date, timedelta


def seed_data(apps, schema_editor):
    User = apps.get_model("users", "Users")
    Software = apps.get_model("licenses", "Software")
    License = apps.get_model("licenses", "License")

    # --- Create Users ---
    # (Ensure these usernames don't conflict if you have existing users)
    users_data = [
        {
            "username": "jdoe_seed",
            "email": "jdoe_seed@example.com",
            "name": "John",
            "surname": "Doe",
            "position": "Developer",
        },
        {
            "username": "asmith_seed",
            "email": "asmith_seed@example.com",
            "name": "Alice",
            "surname": "Smith",
            "position": "Designer",
        },
        {
            "username": "bwayne_seed",
            "email": "bwayne_seed@example.com",
            "name": "Bruce",
            "surname": "Wayne",
            "position": "Project Manager",
        },
    ]
    created_users = []
    for user_data in users_data:
        user, created = User.objects.get_or_create(
            username=user_data["username"],
            defaults={
                "email": user_data["email"],
                "password": make_password("Password123!"),  # Use a secure password
                "name": user_data["name"],
                "surname": user_data["surname"],
                "position": user_data["position"],
                "is_staff": False,
                "is_superuser": False,
            },
        )
        created_users.append(user)

    if not created_users:  # Fallback if users already existed
        created_users = [User.objects.get(username=ud["username"]) for ud in users_data]

    # --- Create Software ---
    software_data = [
        {"name": "PhotoEditor Pro X", "producer": "PixelPerfect Inc."},
        {"name": "DevSuite Ultimate 2024", "producer": "CodeGenius Ltd."},
        {"name": "OfficeFlow 360 Premium", "producer": "Productivity Solutions"},
        {"name": "SecureNet VPN Plus", "producer": "CyberGuard Systems"},
        {"name": "MusicMaker Studio Pro", "producer": "AudioWave Tech"},
        {"name": "DataCruncher Enterprise", "producer": "InfoAnalytics Co."},
    ]
    created_software = []
    for sw_data in software_data:
        software_item, created = Software.objects.get_or_create(
            name=sw_data["name"], defaults={"producer": sw_data["producer"]}
        )
        created_software.append(software_item)

    # --- Create Licenses ---
    licenses_to_create = [
        # Licenses for PhotoEditor Pro X
        {
            "sw": created_software[0],
            "user": created_users[0],
            "key": "PEPX-0001-AAAA-BBBB",
            "purchase": date(2023, 1, 10),
            "exp": date(2025, 1, 9),
            "type": "Subscription",
        },
        {
            "sw": created_software[0],
            "user": created_users[1],
            "key": "PEPX-0002-CCCC-DDDD",
            "purchase": date(2023, 3, 15),
            "exp": None,
            "type": "Perpetual",
        },
        # Licenses for DevSuite Ultimate 2024
        {
            "sw": created_software[1],
            "user": created_users[0],
            "key": "DSUL-0001-EEEE-FFFF",
            "purchase": date(2023, 2, 20),
            "exp": date(2024, 2, 19),
            "type": "Annual",
        },
        {
            "sw": created_software[1],
            "user": created_users[2],
            "key": "DSUL-0002-GGGG-HHHH",
            "purchase": date(2023, 5, 5),
            "exp": date(2025, 5, 4),
            "type": "Subscription",
        },
        # Licenses for OfficeFlow 360 Premium
        {
            "sw": created_software[2],
            "user": created_users[1],
            "key": "OF360-0001-IIII-JJJJ",
            "purchase": date(2022, 12, 1),
            "exp": date(2024, 11, 30),
            "type": "Subscription",
        },
        {
            "sw": created_software[2],
            "user": created_users[2],
            "key": "OF360-0002-KKKK-LLLL",
            "purchase": date(2023, 6, 10),
            "exp": None,
            "type": "Perpetual",
        },
        # Licenses for SecureNet VPN Plus
        {
            "sw": created_software[3],
            "user": created_users[0],
            "key": "SNVP-0001-MMMM-NNNN",
            "purchase": date(2023, 7, 1),
            "exp": date(2024, 6, 30),
            "type": "Annual",
        },
        {
            "sw": created_software[3],
            "user": created_users[1],
            "key": "SNVP-0002-OOOO-PPPP",
            "purchase": date(2023, 8, 5),
            "exp": date(2024, 8, 4),
            "type": "Annual",
        },
        # Licenses for MusicMaker Studio Pro
        {
            "sw": created_software[4],
            "user": created_users[2],
            "key": "MMSP-0001-QQQQ-RRRR",
            "purchase": date(2023, 9, 12),
            "exp": None,
            "type": "Perpetual",
        },
        # Licenses for DataCruncher Enterprise
        {
            "sw": created_software[5],
            "user": created_users[0],
            "key": "DCEN-0001-SSSS-TTTT",
            "purchase": date(2023, 4, 1),
            "exp": date(2025, 3, 31),
            "type": "Subscription",
        },
        {
            "sw": created_software[5],
            "user": created_users[1],
            "key": "DCEN-0002-UUUU-VVVV",
            "purchase": date(2023, 10, 20),
            "exp": date(2024, 10, 19),
            "type": "Annual",
        },
        {
            "sw": created_software[5],
            "user": created_users[2],
            "key": "DCEN-0003-WWWW-XXXX",
            "purchase": date(2024, 1, 5),
            "exp": None,
            "type": "Perpetual",
        },
    ]

    for lic_data in licenses_to_create:
        License.objects.get_or_create(
            license_key=lic_data["key"],
            defaults={
                "software_id": lic_data["sw"],
                "user_id": lic_data["user"],
                "purchase_date": lic_data["purchase"],
                "expiration_date": lic_data["exp"],
                "license_type": lic_data["type"],
            },
        )


def remove_data(apps, schema_editor):
    # This function can be used to remove the seeded data if you ever want to revert the migration
    # For simplicity, we'll make it delete the specific users and software we added.
    User = apps.get_model("users", "Users")
    Software = apps.get_model("licenses", "Software")
    License = apps.get_model("licenses", "License")

    # Delete licenses associated with the specific software or users first
    software_names_to_delete = [
        "PhotoEditor Pro X",
        "DevSuite Ultimate 2024",
        "OfficeFlow 360 Premium",
        "SecureNet VPN Plus",
        "MusicMaker Studio Pro",
        "DataCruncher Enterprise",
    ]
    user_names_to_delete = ["jdoe_seed", "asmith_seed", "bwayne_seed"]

    License.objects.filter(
        models.Q(software_id__name__in=software_names_to_delete)
        | models.Q(user_id__username__in=user_names_to_delete)
    ).delete()

    Software.objects.filter(name__in=software_names_to_delete).delete()
    User.objects.filter(username__in=user_names_to_delete).delete()


class Migration(migrations.Migration):

    dependencies = [
        (
            "licenses",
            "0002_initial",
        ),  # Zastąp '0002_initial' nazwą ostatniej migracji w aplikacji 'licenses'
        (
            "users",
            "0001_initial",
        ),  # Zastąp '0001_initial' nazwą ostatniej migracji w aplikacji 'users'
        # lub migracji tworzącej model User, jeśli jest w innej aplikacji
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(seed_data, remove_data),
    ]
